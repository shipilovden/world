// –ò–º–ø–æ—Ä—Ç—ã –∏–∑ React –∏ @react-three
import React, { useEffect, useRef, useState } from 'react';
import { useGLTF, useAnimations, OrbitControls } from '@react-three/drei';
import { useBox } from '@react-three/cannon';
import { useThree, useFrame } from '@react-three/fiber';
import { CharacterControls } from './CharacterControls';
import { DIRECTIONS } from './utils/keys';export default function Avatar({ joystickDir }) {
  // –†–µ—Ñ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
  const group = useRef();  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç—ã—Ö –∫–ª–∞–≤–∏—à
  const [keysPressed, setKeysPressed] = useState({});  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ –±–µ–≥–∞
  const [isRunMode, setIsRunMode] = useState(false);  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã
  const [cameraFollowMode, setCameraFollowMode] = useState(false);  // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—é
  const { camera } = useThree();
  const orbitControlsRef = useRef();  // –†–µ—Ñ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const characterControlsRef = useRef();  // –ó–∞–≥—Ä—É–∂–∞–µ–º GLTF –º–æ–¥–µ–ª—å –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
  const { scene, animations } = useGLTF('/models/Soldier.glb');  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –∫ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ
  const { actions, names, mixer } = useAnimations(animations, group);  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∫–æ—Ä–æ–±–∫—É (–∫–æ–ª–ª–∏–∑–∏—é) –≤–æ–∫—Ä—É–≥ –º–æ–¥–µ–ª–∏
  const [ref] = useBox(() => ({
    mass: 1,                  // –í–µ—Å —Ç–µ–ª–∞
    position: [0, 1, 0],      // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
    args: [1, 2, 1],          // –†–∞–∑–º–µ—Ä—ã –∫–æ–ª–ª–∏–∑–∏–∏ (—à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞, –≥–ª—É–±–∏–Ω–∞)
  }));  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  useEffect(() => {
    const handleKeyDown = (e) => {
      const key = e.key.toLowerCase();

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –±–µ–≥–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é Shift
  if (key === 'shift' && !keysPressed['shift']) {
    setIsRunMode(prev => !prev);
    if (characterControlsRef.current) {
      characterControlsRef.current.switchRunToggle();
    }
  }
  
  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã –ø–æ –Ω–∞–∂–∞—Ç–∏—é R
  if (key === 'r') {
    setCameraFollowMode(prev => !prev);
  }
  
  setKeysPressed((prev) => ({ ...prev, [key]: true }));
};

const handleKeyUp = (e) => {
  setKeysPressed((prev) => ({ ...prev, [e.key.toLowerCase()]: false }));
};

window.addEventListener('keydown', handleKeyDown);
window.addEventListener('keyup', handleKeyUp);

return () => {
  window.removeEventListener('keydown', handleKeyDown);
  window.removeEventListener('keyup', handleKeyUp);
};

  }, [keysPressed]);  // –ó–∞–ø—É—Å–∫–∞–µ–º Idle-–∞–Ω–∏–º–∞—Ü–∏—é –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–Ω–∏
  useEffect(() => {
    scene.traverse((child) => {
      if (child.isMesh) {
        child.castShadow = true;      // –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–±—Ä–∞—Å—ã–≤–∞—Ç—å —Ç–µ–Ω–∏
        child.receiveShadow = true;   // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–ª—É—á–∞—Ç—å —Ç–µ–Ω–∏
      }
    });

if (names.length > 0) {
  console.log('üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏:', names);
  console.log('üß© –ê–Ω–∏–º–∞—Ü–∏–∏-–æ–±—ä–µ–∫—Ç—ã:', actions);
  
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  const animationsMap = new Map();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
  if (names.includes('Idle')) animationsMap.set('Idle', actions['Idle']);
  if (names.includes('Walk')) animationsMap.set('Walk', actions['Walk']);
  if (names.includes('Run')) animationsMap.set('Run', actions['Run']);
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∫–∞–∫ Idle
  if (animationsMap.size === 0 && names.length > 0) {
    animationsMap.set('Idle', actions[names[0]]);
  }
  
  // –ù–∞—Ö–æ–¥–∏–º OrbitControls –≤ —Å—Ü–µ–Ω–µ
  const orbitControl = orbitControlsRef.current;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  if (mixer && animationsMap.size > 0) {
    characterControlsRef.current = new CharacterControls(
      scene,
      mixer,
      animationsMap,
      orbitControl,
      camera,
      'Idle'
    );
  }
}

  }, [scene, actions, names, mixer, camera]);  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ
  useFrame((state, delta) => {
    if (characterControlsRef.current) {
      characterControlsRef.current.update(delta, keysPressed);
    }

// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã –≤ —Ä–µ–∂–∏–º–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
if (cameraFollowMode && ref.current && characterControlsRef.current) {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∞–≤–∞—Ç–∞—Ä–∞
  const avatarPosition = ref.current.position;
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const direction = characterControlsRef.current.walkDirection;
  
  // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∞–¥–∏ –∞–≤–∞—Ç–∞—Ä–∞
  const distance = 5;
  // –í—ã—Å–æ—Ç–∞ –∫–∞–º–µ—Ä—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∞–≤–∞—Ç–∞—Ä–∞
  const height = 2;
  
  // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã –ø–æ–∑–∞–¥–∏ –∞–≤–∞—Ç–∞—Ä–∞
  const cameraPosition = {
    x: avatarPosition.x - direction.x * distance,
    y: avatarPosition.y + height,
    z: avatarPosition.z - direction.z * distance
  };
  
  // –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞–º–µ—Ä—É –≤ –Ω—É–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
  camera.position.lerp(cameraPosition, 0.05);
  
  // –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∞
  const targetPosition = {
    x: avatarPosition.x,
    y: avatarPosition.y + 1,
    z: avatarPosition.z
  };
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å OrbitControls
  if (orbitControlsRef.current) {
    orbitControlsRef.current.target.set(targetPosition.x, targetPosition.y, targetPosition.z);
  }
  
  // –°–º–æ—Ç—Ä–∏–º –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∞
  camera.lookAt(targetPosition.x, targetPosition.y, targetPosition.z);
}

  });  // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç useEffect:
  useEffect(() => {
    if (!joystickDir) {
      setKeysPressed((prev) => ({ ...prev, w: false, a: false, s: false, d: false }));
      return;
    }
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∂–æ–π—Å—Ç–∏–∫–∞ –≤ –∫–ª–∞–≤–∏—à–∏
    const dirMap = {
      FORWARD: { w: true },
      BACKWARD: { s: true },
      LEFT: { a: true },
      RIGHT: { d: true },
    };
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω—É–∂–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    setKeysPressed((prev) => ({
      w: !!dirMap[joystickDir]?.w,
      a: !!dirMap[joystickDir]?.a,
      s: !!dirMap[joystickDir]?.s,
      d: !!dirMap[joystickDir]?.d,
      shift: prev.shift, // –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º shift
    }));
  }, [joystickDir]);

  return (
    <>
      <OrbitControls
        ref={orbitControlsRef}
        enablePan={false}
        enableZoom={true}
        enableRotate={true}
        minPolarAngle={Math.PI / 4}
        maxPolarAngle={Math.PI / 2}
      />
      <group ref={ref}>
        {/* –í–ª–æ–∂–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–π */}
        <group ref={group} position={[0, -1, 0]}>
          <primitive object={scene} scale={1} />
        </group>
      </group>
    </>
  );
}

